/* crv2tube.mel V1.2

This script may be freely distributed. Modify at your own risk.

Author: Dirk Bialluch (DirkBi@Software2000.de)

Creation date:	29.12.98
Last update:	17.06.99

Description:
	This script turns any selected nurbs curve into a nurbs tube surface.
	Depending on open or periodic curves the extrude settings will be adjusted automatically.
	If you keep the construction history you can adjust the radius (circle) and extrude
	attributes later.

Note:
	Always keep the "path max range" value greater than "path min range", otherwise the caps
	will not work properly.

TIPS:
	If the resulting tube appears flat in some areas you must increase the number of spans on
	the path curve. You can achieve the best results by rebuilding the path uniform.

History:
	V1.1	-store UI settings
		-support nurbs curves on surfaces
		-added path min/max range
		-cap both tube ends with trimmed planar surface
	V1.2	-caps now work correctly if path curves have been detached
		-caps are no longer double transformed by the group node
		-put profile curve into group
		-set profile curve degree
		-set profile curve spans
		-set profile rotation value
*/

//
// Create UI
//

global proc crv2tube ()
{
	if ((`window -exists ui_crv2tube`) == true)
		deleteUI ui_crv2tube;

	window -maximizeButton false -resizeToFitChildren true
	       -title "Curve to Tube V1.2" -iconName "Curve to Tube" ui_crv2tube;
 
		columnLayout -adjustableColumn true;
			floatSliderGrp
				-label "Tube radius"
				-field true
				-precision 3
				-sliderStep .1
				-value .2
				-minValue .0001
				-maxValue 100
				c2t_radius;

			separator -h 5;

			floatSliderGrp
				-label "Path Min Range"
				-field true
				-precision 3
				-sliderStep .1
				-value 0
				-minValue 0
				-maxValue 1
				-changeCommand "c2t_adjustUI 1"
				c2t_minRange;
			floatSliderGrp
				-label "Path Max Range"
				-field true
				-precision 3
				-sliderStep .1
				-value 1
				-minValue 0
				-maxValue 1
				-changeCommand "c2t_adjustUI 2"
				c2t_maxRange;

			separator -h 5;

			floatSliderGrp
				-label "Profile Rotation"
				-field true
				-precision 3
				-sliderStep .1
				-value 0
				-minValue -360
				-maxValue 360
				c2t_rotate;
			intSliderGrp
				-label "Profile Spans"
				-field true
				-sliderStep 1
				-value 8
				-minValue 3
				-maxValue 64
				c2t_spans;

 			radioButtonGrp
    				-numberOfRadioButtons 2
				-cw 1 140
				-cw 2 80
				-label "Profile Degree"
 				-labelArray2 "Linear" "Cubic"
				-select 2
				c2t_degree;

			separator -h 5;

			checkBox
				-align "left"
				-label "Cap both tube ends"
				-value false
				-changeCommand "c2t_adjustUI 3"
				c2t_cap;
			checkBox
				-align "left"
				-label "Group geometry"
				-value true
				-enable false
				c2t_group;

			separator -h 5;

			checkBox
				-align "left"
				-label "Keep Construction History"
				-value true
				c2t_history;

			separator -h 5;

			button
				-label "Create tube"
				-command "c2t_createTube";

	// restore UI settings
	if (`optionVar -exists c2t_radius`)
		floatSliderGrp -e -value `optionVar -q c2t_radius` c2t_radius;
	if (`optionVar -exists c2t_minRange`)
		floatSliderGrp -e -value `optionVar -q c2t_minRange` c2t_minRange;
	if (`optionVar -exists c2t_maxRange`)
		floatSliderGrp -e -value `optionVar -q c2t_maxRange` c2t_maxRange;
	if (`optionVar -exists c2t_rotate`)
		floatSliderGrp -e -value `optionVar -q c2t_rotate` c2t_rotate;
	if (`optionVar -exists c2t_spans`)
		intSliderGrp -e -value `optionVar -q c2t_spans` c2t_spans;
	if (`optionVar -exists c2t_degree`)
		radioButtonGrp -e -select `optionVar -q c2t_degree` c2t_degree;
	if (`optionVar -exists c2t_cap`)
		checkBox -e -value `optionVar -q c2t_cap` c2t_cap;
	if (`optionVar -exists c2t_group`)
		checkBox -e -value `optionVar -q c2t_group` c2t_group;
	if (`optionVar -exists c2t_history`)
		checkBox -e -value `optionVar -q c2t_history` c2t_history;

	// check UI settings after restoring values
	c2t_adjustUI 3;

	showWindow ui_crv2tube;
}

//
// Adjust UI
//

global proc c2t_adjustUI (int $function)
{
	float $min = `floatSliderGrp -q -value c2t_minRange`;
	float $max = `floatSliderGrp -q -value c2t_maxRange`;

	switch ($function)
	{
		case 1:
			if ($min > $max)
				$min = $max;
			break;
		case 2:
			if ($max < $min)
				$max = $min;
			break;
		case 3:
			if (`checkBox -q -value c2t_cap`)
				checkBox -e -enable true c2t_group;
			else
				checkBox -e -enable false c2t_group;
	}

	floatSliderGrp -e -value $min c2t_minRange;
	floatSliderGrp -e -value $max c2t_maxRange;
}


//
// Create tube from curve
//

proc string[] c2t_extrude (string $crv, float $radius, float $min, float $max, int $spans, int $degree, float $rotate)
{
	// get start pos and tan of curve in world space
	float $pos[] = `pointOnCurve -pr .00001 -position $crv`;
	float $tan[] = `pointOnCurve -pr .00001 -tangent $crv`;
	int $periodic = `getAttr ($crv + ".form")`;

	// make circle at start matching curve tangent
	string $profile[] = `circle -c $pos[0] $pos[1] $pos[2]
				    -nr 0 1 0
				    -r $radius
				    -degree $degree
				    -sections $spans`;

	// put curve under new transform node
	string $crvGrp = `group -n tubeConstruction1 $profile[0]`;

	// move circle to curve start point
	xform -cp $profile[0];

	// rotate circle into position once before extruding
	string $tc[] = `tangentConstraint -weight 1 -aimVector 0 1 0 -upVector 0 1 0 $crv $crvGrp`;

	// get form (open/periodic)
	string $form;
	if (($periodic == 0) || ($min != 0) || ($max != 1))
		$form = "true";
	else
		$form = "false";

	// extrude spiral
	string $tube[] = `eval ("extrude -fixedPath true -range true -ucp true -upn " + $form + " -et 2 " + $profile[0] + " " + $crv)`;

	// delete tangentConstraint
	delete $tc[0];

	// rotate circle into position
	setAttr ($profile[0] + ".ry") $rotate;

	// return	(0) profile transform node
	//		(1) make nurbs circle node
	//		(2) tube transform node
	//		(3) extrude node
	//		(4) curve form (open/periodic)
	//		(5) curve group transform node
	return {$profile[0], $profile[1], $tube[0], $tube[1], string($periodic), $crvGrp};
}

//
// Main procedure
//

global proc c2t_createTube ()
{
	// store UI settings
	optionVar -floatValue c2t_radius `floatSliderGrp -q -value c2t_radius`;
	optionVar -floatValue c2t_minRange `floatSliderGrp -q -value c2t_minRange`;
	optionVar -floatValue c2t_maxRange `floatSliderGrp -q -value c2t_maxRange`;
	optionVar -floatValue c2t_rotate `floatSliderGrp -q -value c2t_rotate`;
	optionVar -intValue c2t_spans `intSliderGrp -q -value c2t_spans`;
	optionVar -intValue c2t_degree `radioButtonGrp -q -select c2t_degree`;
	optionVar -intValue c2t_cap `checkBox -q -value c2t_cap`;
	optionVar -intValue c2t_group `checkBox -q -value c2t_group`;
	optionVar -intValue c2t_history `checkBox -q -value c2t_history`;

	// get settings from UI
	float $radius =	`floatSliderGrp -q -value c2t_radius`;
	float $min =	`floatSliderGrp -q -value c2t_minRange`;
	float $max =	`floatSliderGrp -q -value c2t_maxRange`;
	float $rotate =	`floatSliderGrp -q -value c2t_rotate`;
	int $history =	`checkBox -q -value c2t_history`;
	int $cap =	`checkBox -q -value c2t_cap`;
	int $group =	`checkBox -q -value c2t_group`;
	int $spans =	`intSliderGrp -q -value c2t_spans`;
	int $degree =	`radioButtonGrp -q -select c2t_degree`;

	float $minValueV; // store tube minValueV for start cap positioning
	float $maxValueV; // store tube maxValueV for end cap positioning
	string $cap1[];
	string $cap2[];

	string $postSelect[]; // store new geometry names for auto selection when tool has finished

	// get selected nurbs curves and nurbs curves on surface
	string $objList[] = `filterExpand -ex true -sm 9 -sm 11`;

	if (size($objList))
	{
		// correct degree value (1= linear, 3= cubic)
		if ($degree == 2)
			$degree = 3;

		int $count;
		for ($count = 0; $count < size($objList); $count++)
		{
			// extrude profile along path
			string $extrude[] = `c2t_extrude $objList[$count] $radius $min $max $spans $degree $rotate`;

			// cap both ends
			if ($cap)
			{
				string $tubeShape[] = `listRelatives -s $extrude[2]`;
				$minValueV = `getAttr ($tubeShape[0] + ".minValueV")`;
				$maxValueV = `getAttr ($tubeShape[0] + ".maxValueV")`;
				$cap1 = `planarSrf -ch true ($extrude[2] + ".v[" + ($minValueV * $min) + "]")`;
				$cap2 = `planarSrf -ch true ($extrude[2] + ".v[" + ($maxValueV * $max) + "]")`;
				inheritTransform -off $cap1 $cap2;
			}

			if (!$history)
				// delete profile curve
				delete $extrude[0];
			else
			{
				// add and connect construction history attributes

				addAttr -sn trd -ln tubeRadius -at "float" -min .0001 $extrude[2];
				setAttr -keyable on ($extrude[2] + ".tubeRadius") $radius;
				connectAttr ($extrude[2] + ".tubeRadius") ($extrude[1] + ".radius");

				// get subCurve node
				string $subCurve = `connectionInfo -sfd ($extrude[3] + ".path")`;
				string $buffer[];
				tokenize $subCurve "." $buffer;

				addAttr -sn pmir -ln pathMinRange -at "float" -min 0 -max 1 $extrude[2];
				setAttr -keyable on ($extrude[2] + ".pathMinRange") $min;
				connectAttr ($extrude[2] + ".pathMinRange") ($buffer[0] + ".minValue");

				addAttr -sn pmar -ln pathMaxRange -at "float" -min 0 -max 1 $extrude[2];
				setAttr -keyable on ($extrude[2] + ".pathMaxRange") $max;
				connectAttr ($extrude[2] + ".pathMaxRange") ($buffer[0] + ".maxValue");

				// extra attribute for periodic curves and path min/max range
				if (int ($extrude[4]) != 0)
				{
					expression -s  ("if (" + $extrude[2] + ".pathMinRange != 0 || " +
							$extrude[2] + ".pathMaxRange != 1)\n" +
							$extrude[3] + ".useProfileNormal = true;\n" +
							"else\n" +
							$extrude[3] + ".useProfileNormal = false;\n");
				}

				addAttr -sn rot -ln profileRotation -at "float" $extrude[2];
				setAttr -keyable on ($extrude[2] + ".profileRotation") $rotate;
				connectAttr ($extrude[2] + ".profileRotation") ($extrude[0] + ".ry");

				addAttr -sn span -ln profileSpans -at "short" -min 3 -max 64 $extrude[2];
				setAttr -keyable on ($extrude[2] + ".profileSpans") $spans;
				connectAttr ($extrude[2] + ".profileSpans") ($extrude[1] + ".sections");

				if ($cap)
				{
					// get curveFromSurface node
					string $buffer[];

					string $cfs1 = `connectionInfo -sfd ($cap1[1] + ".inputCurve[0]")`;
					tokenize $cfs1 "." $buffer;
					expression -s ($buffer[0] + ".isoparmValue = " +
						       $extrude[2] + ".pathMinRange * " +
						       ($maxValueV - $minValueV) + " + " + $minValueV + ";");

					string $cfs2 = `connectionInfo -sfd ($cap2[1] + ".inputCurve[0]")`;
					tokenize $cfs2 "." $buffer;
					expression -s ($buffer[0] + ".isoparmValue = " +
						       $extrude[2] + ".pathMaxRange * " +
						       ($maxValueV - $minValueV) + " + " + $minValueV + ";");
				}

				// hide profile circle
				hide $extrude[5];
			}
			// group tube & caps
			if ($group && $cap)
				$postSelect[$count] = `group -n tubeGrp1 -w $extrude[2] $cap1[0] $cap2[0]`;
			else
				$postSelect[$count] = $extrude[2];
		}
		select -r $postSelect;
	}
	else
		error "No nurbs curve selected";
}

// end of script

