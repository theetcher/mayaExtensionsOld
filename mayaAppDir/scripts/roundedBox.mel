//
// Copyright (C) 1997-1998 Alias|Wavefront,
// a division of Silicon Graphics Limited.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias|Wavefront.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias|Wavefront license agreement, without fee.
//
// ALIAS|WAVEFRONT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS|WAVEFRONT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
// Alias|Wavefront Script File
// MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date: Oct 1998
//  Author:        Duncan Brinsmead 
//
// Description:
//   This script creates a new box primitive with
//   rounded edges and corners. There is an option box
//   which creates controls to adjust the bevel
//   radius after creating the box. You can also
//   independantly adjust the x y and z size of the box 
//   without affecting the radius of the bevel.
//
// Usage:
//   Put this script (roundedBox.mel) with the 2 attached mel files,
//   (performRoundedBox.mel, userSetup.mel) in your scripts
//   directory and run maya. The new menu item "Rounded Box" should
//   appear in your nurbs primitives menu. If you already have a userSetup.mel
//   file, then simply append the contents of the attached userSetup.mel
//   script to your existing userSetup.mel file.
//
//
//
//
global proc roundedBox(float $bevel, float $sx, float $sy, float $sz, 
	int $controls)
{
	int $history;
	string $surf[], $rBox, $sp, $s1, $s2, $s3, $s4, $s5, $s6, $s7;
	string $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12;
	string $b1, $b2, $b3, $b4, $b5, $b6;

	if( $controls > 0 )
	{
		$history = 1;
	}

	// Create a default sphere
	$surf = `sphere -p 0 0 0 -ax 0 1 0 -ssw 0 -esw 360 
			-r 1 -d 3 -ut 0 -tol 0.01 -s 8 -nsp 4 -ch 0`;
	$sp = $surf[0];


	// Cut the sphere into 8 sections using detach

	$surf = `detachSurface -ch 0 -rpo 1 ($sp + ".v[2]") ($sp + ".v[6]")`;
	$s1 = $surf[0];

	$surf = `detachSurface -ch 0 -rpo 1 ($sp + ".u[2]")`;
	$s2 = $surf[0];

	$surf = `detachSurface -ch 0 -rpo 1 ($s1 + ".u[2]")`;
	$s3 = $surf[0];

	$surf = `detachSurface -ch 0 -rpo 1 ($s3 + ".v[4]")`;
	$s4 = $surf[0];

	$surf = `detachSurface -ch 0 -rpo 1 ($s1 + ".v[4]")`;
	$s5 = $surf[0];

	$surf = `detachSurface -ch 0 -rpo 1 ($s2 + ".v[1]")`;
	$s6 = $surf[0];

	$surf = `detachSurface -ch 0 -rpo 1 ($sp + ".v[1]")`;
	$s7 = $surf[0];

	// Position the scale pivot for each section at the
	// nearest cube corner
	move  1 1 1 ( $s6 + ".scalePivot" );
	move  -1 1 1 ( $s3 + ".scalePivot" );
	move  -1 1 -1 ( $s4 + ".scalePivot" );
	move  -1 -1 -1 ( $s5 + ".scalePivot" );
	move  -1 -1 1 ( $s1 + ".scalePivot" );
	move  1 -1 1 ( $s7 + ".scalePivot" );
	move  1 -1 -1 ( $sp + ".scalePivot" );
	move  1 1 -1 ( $s2 + ".scalePivot" );

	$sx = $sx/2.0;
	$sy = $sy/2.0;
	$sz = $sz/2.0;
	if( $bevel > $sx )
		$bevel = $sx;
	if( $bevel > $sy )
		$bevel = $sy;
	if( $bevel > $sz )
		$bevel = $sz;

	// We determine the coord system so we can 
	// offset the cube to sit on the groundplane
	string $isitYup = `upAxis -q -ax`;
	int $isYup =  ("y" == $isitYup) ;

	float $yoff, $zoff;
	if( $isYup )
	{
		$yoff = $sy;
		$zoff = 0;
	}
	else
	{
		$yoff = 0;
		$zoff = $sz;
	}
	$sx = $sx-1.0;
	$sy = $sy-1.0;
	$sz = $sz-1.0;

	// we scale the 8 corner sections about their new axis
	scale  $bevel $bevel $bevel $sp $s1 $s2 $s3 $s4 $s5 $s6 $s7;
	
	// we move the 8 corner sections to the defined corners of the box 
	move -r $sx 0 0 $s6 $s7 $s2 $sp;
	move -r 0 ($yoff + $sy) 0 $s6 $s3 $s4 $s2; 
	move -r 0 0 ($zoff + $sz) $s6 $s3 $s1 $s7; 
	
	move -r (-$sx) 0 0 $s3 $s4 $s5 $s1;
	move -r 0 ($yoff - $sy) 0 $s5 $s1 $s7 $sp; 
	move -r 0 0 ($zoff -$sz) $s4 $s5 $sp $s2; 


	// We join all the edges with lofts, creating the rounded edges 

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
					($s3 +".u[2]") ($s1 +".u[2]")`;
	$l1 = $surf[0];
	
	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
					($s6 +".u[2]") ($s7 +".u[2]")`;
	$l2 = $surf[0];
	
	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
					($s2 +".u[2]") ($sp +".u[2]")`;
	$l3 = $surf[0];
	
	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
					($s4 +".u[2]") ($s5 +".u[2]")`;
	$l4 = $surf[0];
	
	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($s2 +".v[0]") ($s4 +".v[6]")`;
	$l5 = $surf[0];

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($s4 +".v[4]") ($s3 +".v[4]")`;
	$l6 = $surf[0];

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($s3 +".v[2]") ($s6 +".v[2]")`;
	$l7 = $surf[0];

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($s6 +".v[1]") ($s2 +".v[1]")`;
	$l8 = $surf[0];

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($s7 +".v[1]") ($sp +".v[1]")`;
	$l9 = $surf[0];

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($sp+".v[0]") ($s5 +".v[6]")`;
	$l10 = $surf[0];

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($s5+".v[4]") ($s1 +".v[4]")`;
	$l11 = $surf[0];

	$surf = `loft -ch $history -u 1 -c 0 -ar 1 -d 3 -rn 0 -po 0 
				($s1+".v[2]") ($s7 +".v[2]")`;
	$l12 = $surf[0];


	// Now fill in the faces of the box using boundary
	$surf = `boundary -ch $history -or 0 -ep 0 -rn 0 -po 0 -ept 0.01 
	($l5 +".v[4]") ($l8 + ".v[4]") ($l7 + ".v[4]") ($l6 +".v[4]")`;
	$b1 = $surf[0];

	$surf = `boundary -ch $history -or 0 -ep 0 -rn 0 -po 0 -ept 0.01 
	($l11 +".v[0]") ($l12 + ".v[0]") ($l9 + ".v[0]") ($l10 +".v[0]")`;
	$b2 = $surf[0];

	$surf = `boundary -ch $history -or 0 -ep 0 -rn 0 -po 0 -ept 0.01 
	($l1 +".v[2]") ($l7 + ".v[2]") ($l2 + ".v[2]") ($l12 +".v[2]")`;
	$b3 = $surf[0];

	$surf = `boundary -ch $history -or 0 -ep 0 -rn 0 -po 0 -ept 0.01 
	($l2 +".v[1]") ($l8 + ".v[2]") ($l3 + ".v[1]") ($l9 +".v[2]")`;
	$b4 = $surf[0];

	$surf = `boundary -ch $history -or 0 -ep 0 -rn 0 -po 0 -ept 0.01 
	($l3 +".v[0]") ($l5 + ".v[2]") ($l4 + ".v[6]") ($l10 +".v[2]")`;
	$b5 = $surf[0];

	$surf = `boundary -ch $history -or 0 -ep 0 -rn 0 -po 0 -ept 0.01 
	($l4 +".v[4]") ($l6 + ".v[2]") ($l1 + ".v[4]") ($l11 +".v[2]")`;
	$b6 = $surf[0];

	// Put all the surfaces into a grouped object
	$rBox = `group -n "roundedBox" $sp $s1 $s2 $s3 $s4 $s5 $s6 $s7 
		$l1 $l2 $l3 $l4 $l5 $l6 $l7 $l8 $l9 $l10 $l11 $l12 
		$b1 $b2 $b3 $b4 $b5 $b6`;


	if( $controls > 1 )
	{
		// Add control attributes to the grouped object

    	addAttr -sn bv -ln bevel  -dv $bevel -min 0 -max 100 $rBox;
    	setAttr -keyable on ($rBox + ".bevel");
    	addAttr -sn xs -ln xsize  -dv (($sx+1)*2) -min 0 -max 100 $rBox;
    	setAttr -keyable on ($rBox + ".xsize");
    	addAttr -sn ys -ln ysize  -dv (($sy+1)*2) -min 0 -max 100 $rBox;
    	setAttr -keyable on ($rBox + ".ysize");
    	addAttr -sn zs -ln zsize  -dv (($sz+1)*2) -min 0 -max 100 $rBox;
    	setAttr -keyable on ($rBox + ".zsize");

		// Create an expression to drive the position and
		// scale of the box corners using the control attributes
		expression -s ("$bevel = "+$rBox+".bevel;\n"
					+ "$sx = "+$rBox+".xsize/2;\n"
					+ "$sy = "+$rBox+".ysize/2;\n"
					+ "$sz = "+$rBox+".zsize/2;\n"
					+ "if( $bevel > $sx ) {$bevel = $sx;}\n"
					+ "if( $bevel > $sy ) {$bevel = $sy;}\n"
					+ "if( $bevel > $sz ) {$bevel = $sz;}\n"
					+ "$yoff = $sy * " + $isYup + ";\n"
					+ "$zoff = $sz * " + (!$isYup) + ";\n"
					+ "$sx = $sx - 1;\n"
					+ "$sy = $sy - 1;\n"
					+ "$sz = $sz - 1;\n"
					+ $sp +".sx = $bevel;\n"
					+ $sp +".sy = $bevel;\n"
					+ $sp +".sz = $bevel;\n"

					+ $s1 +".sx = $bevel;\n"
					+ $s1 +".sy = $bevel;\n"
					+ $s1 +".sz = $bevel;\n"

					+ $s2 +".sx = $bevel;\n"
					+ $s2 +".sy = $bevel;\n"
					+ $s2 +".sz = $bevel;\n"

					+ $s3 +".sx = $bevel;\n"
					+ $s3 +".sy = $bevel;\n"
					+ $s3 +".sz = $bevel;\n"

					+ $s4 +".sx = $bevel;\n"
					+ $s4 +".sy = $bevel;\n"
					+ $s4 +".sz = $bevel;\n"

					+ $s5 +".sx = $bevel;\n"
					+ $s5 +".sy = $bevel;\n"
					+ $s5 +".sz = $bevel;\n"

					+ $s6 +".sx = $bevel;\n"
					+ $s6 +".sy = $bevel;\n"
					+ $s6 +".sz = $bevel;\n"

					+ $s7 +".sx = $bevel;\n"
					+ $s7 +".sy = $bevel;\n"
					+ $s7 +".sz = $bevel;\n"

					+ $sp +".tx = $sx;\n"
					+ $sp +".ty = $yoff-$sy;\n"
					+ $sp +".tz = $zoff-$sz;\n"

					+ $s1 +".tx = -$sx;\n"
					+ $s1 +".ty = $yoff-$sy;\n"
					+ $s1 +".tz = $zoff+$sz;\n"

					+ $s2 +".tx = $sx;\n"
					+ $s2 +".ty = $yoff +$sy;\n"
					+ $s2 +".tz = $zoff -$sz;\n"

					+ $s3 +".tx = -$sx;\n"
					+ $s3 +".ty = $yoff + $sy;\n"
					+ $s3 +".tz = $zoff + $sz;\n"

					+ $s4 +".tx = -$sx;\n"
					+ $s4 +".ty = $yoff + $sy;\n"
					+ $s4 +".tz = $zoff - $sz;\n"

					+ $s5 +".tx = -$sx;\n"
					+ $s5 +".ty = $yoff - $sy;\n"
					+ $s5 +".tz = $zoff - $sz;\n"

					+ $s6 +".tx = $sx;\n"
					+ $s6 +".ty = $yoff + $sy;\n"
					+ $s6 +".tz = $zoff + $sz;\n"

					+ $s7 +".tx = $sx;\n"
					+ $s7 +".ty = $yoff - $sy;\n"
					+ $s7 +".tz = $zoff + $sz;\n" );

	}
}

