//
// Copyright (C) 1997-1998 Alias|Wavefront,
// a division of Silicon Graphics Limited.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias|Wavefront.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias|Wavefront license agreement, without fee.
//
// ALIAS|WAVEFRONT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS|WAVEFRONT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
// Alias|Wavefront Script File
// MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date: Oct 1998
//  Author:        Duncan Brinsmead 
//
//  Description:
//	This script defines the option box for the roundedBox menu item.
//     (This script works in conjunction with roundedBox.mel and userSetup.mel.
//	Please read the attached readme.txt file)
//
//
//  Procedure Name:
//
//      setOptionVars
//
//
//
//
//
//
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	if( $forceFactorySettings || !`optionVar -exists roundedBoxCreateControls`){
		optionVar -intValue roundedBoxCreateControls false;
	}

	if ($forceFactorySettings ||  !`optionVar -exists roundedBoxBevelRadius`) {
		optionVar -floatValue roundedBoxBevelRadius 0.05;
	}

	if ($forceFactorySettings ||  !`optionVar -exists roundedBoxSizeX`) {
		optionVar -floatValue roundedBoxSizeX 1.0;
	}
	if ($forceFactorySettings ||  !`optionVar -exists roundedBoxSizeY`) {
		optionVar -floatValue roundedBoxSizeY 1.0;
	}
	if ($forceFactorySettings ||  !`optionVar -exists roundedBoxSizeZ`) {
		optionVar -floatValue roundedBoxSizeZ 1.0;
	}
}

//
//  Procedure Name:
//      roundedBoxSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//	forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc roundedBoxSetup(string $parent, int $forceFactorySettings)
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	//	Query the optionVar's and set the values into the controls.


	// Size 
	//
	floatSliderGrp -e
		-v `optionVar -q roundedBoxSizeX`
		roundedBoxSizeX;
	floatSliderGrp -e
		-v `optionVar -q roundedBoxSizeY`
		roundedBoxSizeY;
	floatSliderGrp -e
		-v `optionVar -q roundedBoxSizeZ`
		roundedBoxSizeZ;

	// Bevel Radius
	//
	floatSliderGrp -e
		-v `optionVar -q roundedBoxBevelRadius`
		roundedBoxBevelRadius;

	// CreateControls
	checkBox -e
		-v `optionVar -q roundedBoxCreateControls`
		roundedBoxCreateControls;
}

//
//  Procedure Name:
//      roundedBoxCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//	doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc roundedBoxCallback(string $parent, int $doIt)
{
    setParent $parent;

	//	Set the optionVar's from the control values, and then
	//	perform the command.


	// Size 
	//
	optionVar -floatValue roundedBoxSizeX
		`floatSliderGrp -q -v roundedBoxSizeX`;
	optionVar -floatValue roundedBoxSizeY
		`floatSliderGrp -q -v roundedBoxSizeY`;
	optionVar -floatValue roundedBoxSizeZ
		`floatSliderGrp -q -v roundedBoxSizeZ`;

	// Bevel Radius
	//
	optionVar -floatValue roundedBoxBevelRadius
		`floatSliderGrp -q -v roundedBoxBevelRadius`;

	// Create Controls 
	//
	optionVar -intValue roundedBoxCreateControls
		`checkBox -q -v roundedBoxCreateControls`;

	if ($doIt) {
		performRoundedBox 0;
	}
}

//
//  Procedure Name:
//      roundedBoxOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc roundedBoxOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "roundedBox";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	STEP 1:  Get the option box.
	//	============================
	//
	//	The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	//	Any default option box behaviour based on the command name is set 
	//	up with this call.  For example, updating the 'Help' menu item with
	//	the name of the command.
	//
	setOptionBoxCommandName($commandName);
	
	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	//	STEP 4: Create option box contents.
	//	===================================
	//
	tabLayout -scr true -tv false;
	string $parent = `columnLayout -adjustableColumn 1`;

	floatSliderGrp -label "Bevel Radius"
		-min 0 -max 10 -fmn -0 -fmx 100000
		roundedBoxBevelRadius;

	separator;

	floatSliderGrp -label "Size X"
		-min 0 -max 100 -fmn -0 -fmx 100000
		roundedBoxSizeX;

	floatSliderGrp -label "Size Y"
		-min 0 -max 100 -fmn -0 -fmx 100000
		roundedBoxSizeY;

	floatSliderGrp -label "Size Z"
		-min 0 -max 100 -fmn -0 -fmx 100000
		roundedBoxSizeZ;

	separator;

	checkBox -label "Create Controls"
		roundedBoxCreateControls;


	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Step 5: Deactivate the default UI template.
	//      ===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.
	//	Disable those buttons that are not applicable to the option box.
	//	Attach actions to those buttons that are applicable to the option box.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label "Create"
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle("NURBS Sphere Options");

	//	Set the current values of the option box.
	//	=========================================
	//
	eval (($setup + " " + $parent + " " + 0));	
	
	//	Show the option box.
	//	====================
	//
	showOptionBox();
}

//
//  Procedure Name:
//      sphereHelp
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string roundedBoxHelp()
{
	return 
	"  Command: roundedBox - create a NURBS box with uniformly rounded edges.\n";
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
proc string assembleCmd()
{
	string $cmd = "roundedBox";

	setOptionVars(false);


	float $sizeX = `optionVar -q roundedBoxSizeX`;
	float $sizeY = `optionVar -q roundedBoxSizeY`;
	float $sizeZ = `optionVar -q roundedBoxSizeZ`;

	float $bevelRadius = `optionVar -q roundedBoxBevelRadius`;
	int $controls = `optionVar -q roundedBoxCreateControls`;

	// History
	//
	int $doHistory = `constructionHistory -q -toggle`;
	if( $controls == 0 )
	{
		$controls += $doHistory;
	}
	else
	{
		$controls++;
	}

	$cmd = ($cmd 
		+ " " + $bevelRadius + " " 
		+ $sizeX + " " + $sizeY + " " + $sizeZ 
		+ " " + $controls
		+ ";objectMoveCommand");

	return $cmd;
}

//
//  Procedure Name:
//      performRoundedBox
//
//  Description:
//		Perform the roundedBox command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the sphere command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performRoundedBox(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			roundedBoxOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}

