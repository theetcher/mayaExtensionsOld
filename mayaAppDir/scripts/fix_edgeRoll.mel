source watch;

proc initOptionVars ()
{

	if (!`optionVar -exists "fix_rollEdgeAngle"`)
		optionVar -floatValue "fix_rollEdgeAngle" 90;

	if (!`optionVar -exists "fix_rollEdgeRadius"`)
		optionVar -floatValue "fix_rollEdgeRadius" 0.5;

	if (!`optionVar -exists "fix_rollEdgeSegments"`)
		optionVar -intValue "fix_rollEdgeSegments" 3;

	if (!`optionVar -exists "fix_rollEdgeDirNorm"`)
		optionVar -intValue "fix_rollEdgeDirNorm" 0;

	if (!`optionVar -exists "fix_rollEdgeDirY"`)
		optionVar -intValue "fix_rollEdgeDirY" 0;

	if (!`optionVar -exists "fix_rollEdgeExtra"`)
		optionVar -intValue "fix_rollEdgeExtra" 0;

	if (!`optionVar -exists "fix_rollEdgeExtraLength"`)
		optionVar -floatValue "fix_rollEdgeExtraLength" 0.2;
}

proc setOptionVars ()
{

	optionVar -floatValue "fix_rollEdgeAngle" `floatSliderGrp -q -v ER_rollAngle`;
	optionVar -floatValue "fix_rollEdgeRadius" `floatSliderGrp -q -v ER_rollRadius`;
	optionVar -intValue "fix_rollEdgeSegments" `intFieldGrp -q -v1 ER_rollSegments`;
	optionVar -intValue "fix_rollEdgeDirNorm" `checkBoxGrp -q -v1 ER_rollReverses`;
	optionVar -intValue "fix_rollEdgeDirY" `checkBoxGrp -q -v2 ER_rollReverses`;
	optionVar -intValue "fix_rollEdgeExtra" `checkBoxGrp -q -v1 ER_extraSegment`;
	optionVar -floatValue "fix_rollEdgeExtraLength" `floatSliderGrp -q -v ER_extraSegmentLength`;
	

}


global proc fix_edgeRoll()
{


	initOptionVars ();
	
	if (`window -exists edgeRollWindow` == 1)
			deleteUI edgeRollWindow;

	int $winWidth = 400;
	int $separatorWidth = $winWidth - 7;
	
	
	string $edgeRollWin = `window 
				-t "Edge Roll"
				-in "Edge Roll"
				-s 0
				-mnb 1
				-mxb 0
				edgeRollWindow`;
//	formLayout MPSWin_UIFormLayout;

	
	columnLayout -co both -200;
	
		separator -style "none" -height 5;
		separator -style "double" -width $separatorWidth;
		separator -style "none" -height 5;

		floatSliderGrp
			-field on
			-label "Angle"
			-minValue 10
			-maxValue 120.0
			-fieldMinValue 1.0
			-fieldMaxValue 359.0
			-step 0.001
			-value `optionVar -q "fix_rollEdgeAngle"`
			ER_rollAngle;

		floatSliderGrp
			-field on
			-label "Radius"
			-minValue 0.01
			-maxValue 10
			-fieldMinValue 0.001
			-fieldMaxValue 1000.0
			-step 0.001
			-value `optionVar -q "fix_rollEdgeRadius"`
			ER_rollRadius;
		
	    	intFieldGrp -numberOfFields 1
			-label "Segments" -value1 `optionVar -q "fix_rollEdgeSegments"`
			ER_rollSegments;
			
		separator -style "in" -width $separatorWidth;
		separator -style "none" -height 5;

		checkBoxGrp
			-numberOfCheckBoxes 2
			-label "Reverse"
			-labelArray2 "normal" "direction"
			-valueArray2 `optionVar -q "fix_rollEdgeDirNorm"` `optionVar -q "fix_rollEdgeDirY"`
			ER_rollReverses;

		separator -style "in" -width $separatorWidth;
		separator -style "none" -height 5;

		checkBoxGrp -label "Extra segment"
			-value1 `optionVar -q "fix_rollEdgeExtra"`
			-annotation ("insert an extra segment at the begininng of the roll")
			ER_extraSegment;

		floatSliderGrp
			-field on
			-label "Extra segment length"
			-minValue 0.01
			-maxValue 10
			-fieldMinValue 0.001
			-fieldMaxValue 1000.0
			-step 0.001
			-enable `optionVar -q "fix_rollEdgeExtra"`
			-value `optionVar -q "fix_rollEdgeExtraLength"`
			ER_extraSegmentLength;

		separator -style "none" -height 5;
		separator -style "double" -width $separatorWidth;
		separator -style "none" -height 5;

		rowColumnLayout  -numberOfColumns 3 
			-columnWidth 1 131 
			-columnWidth 2 131 
			-columnWidth 3 131;

			button -label "Edge Roll" 
				-ann "peform Edge Roll on selected edges" 
				-command "do_edgeRoll;deleteUI edgeRollWindow;";

			button -label "Apply" 
				-ann "peform Edge Roll on selected edges and leave this window opened" 
				-command "do_edgeRoll;";

			button -label "Cancel" 
				-ann "cancel this operation" 
				-command "deleteUI edgeRollWindow;";
		
		setParent ..;
		
		// diming control on ER_extraSegmentLength

		checkBoxGrp -edit
			-changeCommand ("int $onOff = `checkBoxGrp -q -value1 ER_extraSegment`;" +
				"floatSliderGrp -edit -enable $onOff ER_extraSegmentLength;")
			ER_extraSegment;

		

	showWindow $edgeRollWin;

	window -e -w $winWidth -h 213 $edgeRollWin; // width and height works only after window has been shown

}


global proc do_edgeRoll ()
{
	
	setOptionVars();

	if (! size (`filterExpand -sm 32`)) error ("select polygon edges !!!");

	float $angleDeg = `optionVar -q "fix_rollEdgeAngle"`;
	float $radius = `optionVar -q "fix_rollEdgeRadius"`;
	int $segments = `optionVar -q "fix_rollEdgeSegments"`;
	int $dirNormal;
	int $dirY;
	int $extra = `optionVar -q "fix_rollEdgeExtra"`;
	float $extraLength = `optionVar -q "fix_rollEdgeExtraLength"`;
	
	
	if (`optionVar -q "fix_rollEdgeDirNorm"`) $dirNormal = 1;
		else $dirNormal = -1;
	
	if (`optionVar -q "fix_rollEdgeDirY"`) $dirY = -1;
		else $dirY = 1;

	performEdgeRoll ($angleDeg, $radius, $segments, $dirNormal, $dirY, $extra, $extraLength);

}

global proc performEdgeRoll(float $angleDeg, float $radius, int $segments, int $dirNormal, int $dirY, int $extra, float $extraLength)
{

	int $i;
	string $cmd;
	float $angle = deg_to_rad ($angleDeg);
	
	if ($extra) {
		$cmd = "polyExtrudeEdge -ch 0 -ws 0 -ran 0 -d 1 -t 0 0 0 -ro 0 0 0 -s 1 1 1 -pvt 0 0 0 -lt 0 "+($extraLength * $dirY)+" 0 -lr 0 0 0 -ld 0 0 1 -ls 1 1 1";
		polyPerformAction $cmd e 0;
//		polyExtrudeEdge -ch 0 -ws 0 -ran 0 -d 1 -t 0 0 0 -ro 0 0 0 -s 1 1 1 -pvt 0 0 0 -lt 0 ($extraLength * $dirY) 0 -lr 0 0 0 -ld 0 0 1 -ls 1 1 1;
	}
	
	$cmd = "polyExtrudeEdge -ch 0 -ws 0 -ran 0 -d 1 -t 0 0 0 -ro 0 0 0 -s 1 1 1 -pvt 0 0 0 -lt 0 "+(2 * $radius * sin($angle / (2*$segments)) * cos($angle /(2*$segments)) * $dirY)+" "+(2 * $radius * sin($angle / (2*$segments)) * sin($angle /(2*$segments)) * $dirNormal)+" -lr 0 0 0 -ld 0 0 1 -ls 1 1 1";
	polyPerformAction $cmd e 0;
	


	for ($i = 2; $i <= $segments; $i++) {
		$cmd = "polyExtrudeEdge -ch 0 -ws 0 -ran 0 -d 1 -t 0 0 0 -ro 0 0 0 -s 1 1 1 -pvt 0 0 0 -lt 0 "+(2 * $radius * sin($angle / (2*$segments)) * cos($angle / $segments) * $dirY)+" "+(2 * $radius * sin($angle / (2*$segments)) * sin($angle / $segments) * $dirNormal)+" -lr 0 0 0 -ld 0 0 1 -ls 1 1 1";
		polyPerformAction $cmd e 0;
	}


}

