/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: Render Please v1.3
''    Author: Nitisara
''    Last Updated: February 13, 2002
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=rendering#1510
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

/********************************************
              Render Please script

Renders a sequence of images in Render View.
All settings are taken from Render Globals

Description of parameters:

$keep : 0 = do not keep images in Render View
        1 = keep images in Render View (at first it destroys
            all images which are present in Render View)

Notes : a) If script gave an error and didn't finish
        execution correctly, type "progressWindow -ep",
        and its dialog window will close.
        b) Procedure "destroyAllImagesInRenderView"
        does exactly what it says - you can use it separately.

********************************************/

global proc renderPlz(int $keep)
{
    float $startTime, $lastTime = 0, $restTime, $passedTime = 0;
    int $passedHr, $passedMin, $passedSec, $restHr, $restMin, $restSec;
    int $f, $poMin, $poMax, $i;
    int $sf = `getAttr defaultRenderGlobals.startFrame`;
    int $ef = `getAttr defaultRenderGlobals.endFrame`;
    int $df = `getAttr defaultRenderGlobals.byFrameStep`;
    string $camera, $status, $str;
    string $cameras[];

    if(`getAttr defaultRenderGlobals.animation` == 0)
    {
        confirmDialog -message "Please select a sequence in Render Globals."
         -title "No sequence to render"
         -button "Ok" -defaultButton "Ok";
        return;
    }

    if($keep == 1)
        destroyAllImagesInRenderView();

    $poMin = `playbackOptions -q -min`;
    $poMax = `playbackOptions -q -max`;
    playbackOptions -min $sf -max $ef;
    playButtonStart;

    $cameras = `listCameras`;
    for($i = 0; $i < size($cameras); $i ++)
    {
        $str = "getAttr "+$cameras[$i]+".rnd";
        if(eval($str) == true)
        {
            $camera = $cameras[$i];
            break;
        }
    }
    RenderViewWindow;
    progressWindow -isInterruptable yes -min $sf -max $ef -title "Render Please   (c) 2002 Nitisara";

    for($f = $sf; $f <= $ef; $f += $df)
    {
        $restTime = $lastTime*($ef-$f+1);
        $passedHr = $passedTime/3600;
        $passedMin = ($passedTime-$passedHr*3600)/60;
        $passedSec = $passedTime-$passedHr*3600-$passedMin*60;
        $restHr = $restTime/3600;
        $restMin = ($restTime-$restHr*3600)/60;
        $restSec = $restTime-$restHr*3600-$restMin*60;
        $status = "Time passed: "+$passedHr+":"+$passedMin+":"+$passedSec+"      Time left: "+$restHr+":"+$restMin+":"+$restSec;
        progressWindow -edit -progress $f -status $status;
        $startTime = `timerX`;

        render $camera;

        if($keep == 1)
            renderWindowMenuCommand keepImageInRenderView renderView;
        $lastTime = `timerX -startTime $startTime`;
        $passedTime += $lastTime;
        if(`progressWindow -query -isCancelled` == yes)
            break;
        for($i = 0; $i < $df; $i ++)
            playButtonStepForward;
    }

    progressWindow -endProgress;
    playbackOptions -min $poMin -max $poMax;
}

global proc destroyAllImagesInRenderView()
{
    RenderViewWindow;
    while(`renderWindowEditor -q -nbImages renderView` > 0)
    {
        renderWindowEditor -e -displayImage 0 renderView;
        renderWindowMenuCommand removeImageFromRenderView renderView;
    }
}
